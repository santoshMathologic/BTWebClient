var app=angular.module("LocoLinkWebClient");app.service("TimeCalculator",function(){var e=function(e,a){if(null===e||"object"!=typeof e)throw new Error("Not valid dateTimeObject passed to convertDateTimeObj()");if(null===e.day||null===e.time)throw new Error("Not valid dateTimeObject passed to convertDateTimeObj()");null===a&&(a=""),a=a.toLowerCase();var r=e.time.split(":");if(r[0]=parseInt(r[0]),r[1]=parseInt(r[1]),(r[0]>23||r[0]<0)&&(r[1]>59||r[1]<0))throw new Error("Not valid dateTimeObj.time passed to convertDateTimeObj()");var t=1440*e.day+60*r[0]+r[1],o=null;switch(a){case"mins":case"min":case"minutes":case"minute":o=t;break;case"hrs":case"hr":case"hours":case"hour":o=t/60;break;case"days":case"day":o=t/1440;break;default:o=t}return o},a=function(e,a){if(null===a&&(a=""),a=a.toLowerCase(),null===e)throw new Error("Number not sent to convertNumberToDateTimeObj()");var r=-1,t=-1,o=-1;switch(a){case"mins":case"min":case"minutes":case"minute":if(r=Math.floor(e/1440),e%=1440,t=Math.floor(e/60),e%=60,(o=Math.floor(e))>60)throw new Error("Number not in correct type given");break;case"hrs":case"hr":case"hours":case"hour":if(r=Math.floor(e/1440),e%=1440,(t=Math.floor(e/60))>24)throw new Error("Number not in correct type given");break;case"days":case"day":if((r=Math.floor(e/1440))>24)throw new Error("Number not in correct type given");break;default:if(r=Math.floor(e/1440),e%=1440,t=Math.floor(e/60),e%=60,(o=Math.floor(e))>60)throw new Error("Number not in correct type given")}var s={};return-1!=r&&(s.days=r,s.day=r%7),-1!=t&&-1==o?s.time=t<10?"0":t+":00":-1!=t&&-1!=o&&(s.time="",s.time+=(t<10?"0":"")+t.toString(),s.time+=":"+(o<10?"0":"")+o.toString()),s};return{convertDateTimeObjToNumber:e,convertNumberToDateTimeObj:a,addDateTimeObj:function(r,t,o,s){if(null===s&&(s=""),null===o&&(o="+"),s=s.toLowerCase(),o=o.toLowerCase(),isNaN(t))throw new Error("Number is not proper in addDateTimeObj()");var i,n=null,c=null;switch(n=e(r,"min"),o){case"+":case"plus":case"add":case"addition":c=n+t;break;case"-":case"minus":case"sub":case"subtract":case"subtraction":if((c=n-t)<0)switch(s){case"mins":case"min":case"minutes":case"minute":i=Math.floor(Math.abs(c)/10080),c=10080*(i+=1)+c;break;case"hrs":case"hr":case"hours":case"hour":i=Math.floor(Math.abs(c)/10080),c=168*(i+=1)+c;break;case"days":case"day":i=Math.floor(Math.abs(c)/10080),c=7*(i+=1)+c;break;default:i=Math.floor(Math.abs(c)/10080),c=10080*(i+=1)+c}break;default:c=n+t}return a(c,"min")},diffDateTimeObj:function(r,t,o){if(null===r||"object"!=typeof r)throw new Error("Not valid fromObj passed to diffDateTimeObj()");if(null===r.day||null===r.time)throw new Error("Not valid fromObj passed to diffDateTimeObj()");if(null===t||"object"!=typeof t)throw new Error("Not valid toObj passed to diffDateTimeObj()");if(null===t.day||null===t.time)throw new Error("Not valid toObj passed to diffDateTimeObj()");o||(o=""),o=o.toLowerCase();var s,i=e(r,o),n=e(t,o)-i,c=!0;if(n<0)switch(c=!1,o){case"mins":case"min":case"minutes":case"minute":s=Math.floor(Math.abs(n)/10080),n=10080*(s+=1)+n;break;case"hrs":case"hr":case"hours":case"hour":s=Math.floor(Math.abs(n)/10080),n=168*(s+=1)+n;break;case"days":case"day":s=Math.floor(Math.abs(n)/10080),n=7*(s+=1)+n;break;default:s=Math.floor(Math.abs(n)/10080),n=10080*(s+=1)+n}var l=a(n,o);return l.positive=c,l}}});